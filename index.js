const http = require('http')
const express = require('express')
const app = express()

app.use(express.json())

// const app = http.createServer((request, response) => {
//     response.writeHead(200, { 'Content-Type': 'text/plain' })
//     response.end('Hello World')
// })

let notes = [
    {
        id: 1,
        content: "HTML is easy",
        date: "2022-05-30T17:30:31.098Z",
        important: true
    },
    {
        id: 2,
        content: "Browser can execute only Javascript",
        date: "2022-05-30T18:39:34.091Z",
        important: false
    },
    {
        id: 3,
        content: "GET and POST are the most important methods of HTTP protocol",
        date: "2022-05-30T19:20:14.298Z",
        important: true
    }
]

//Create unique ID
const generateId = () => {
    const maxId = notes.length > 0
        ? Math.max(...notes.map(n => n.id))
        : 0
    return maxId + 1
}

app.post('/api/notes', (request, response) => {
    const body = request.body

    //Content property can't be empty
    if (!body.content) {
        return response.status(400).json({      //CRUCIAL! without res, malformed note will save to app
            error: 'content missing'
        })
    }

    const note = {
        content: body.content,
        important: body.important || false,
        date: new Date(),   //Generated by server since can't trust machine has date set up
        id: generateId(),
    }

    notes = notes.concat(note)
    console.log(note)
    response.json(note)
})

app.get('/', (request, response) => {
    response.send('<h1>Hello World!</h1>')
})

app.get('/api/notes', (request, response) => {
    response.json(notes)
})

app.get('/api/notes/:id', (request, response) => {
    const id = Number(request.params.id)  //Change ID parameter to a number
    // console.log(id)  //test ID number
    const note = notes.find(note => note.id === id)
    // response.json(note)
    if (note) {
        response.json(note)
    } else {
        response.status(404).end()  //Return 404 error
    }
})

app.delete('/api/notes/:id', (request, response) => {
    const id = Number(request.params.id)
    notes = notes.filter(note => note.id !== id)

    response.status(204).end()  //No content status
})

console.log(request.headers)  //Will show all headers which have been left empty

const PORT = 3001
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`)
})
