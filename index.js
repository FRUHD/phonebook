const http = require('http')
const express = require('express')
const app = express()

app.use(express.json())

let persons = [
    { 
      "id": 1,
      "name": "Arto Hellas", 
      "number": "040-123456"
    },
    { 
      "id": 2,
      "name": "Ada Lovelace", 
      "number": "39-44-5323523"
    },
    { 
      "id": 3,
      "name": "Dan Abramov", 
      "number": "12-43-234345"
    },
    { 
      "id": 4,
      "name": "Mary Poppendieck", 
      "number": "39-23-6423122"
    }
]

// //Create unique ID
// const generateId = () => {
//     const maxId = persons.length > 0
//         ? Math.max(...persons.map(n => n.id))
//         : 0
//     return maxId + 1
// }

// app.post('/api/persons', (request, response) => {
//     const body = request.body

//     //Content property can't be empty
//     if (!body.content) {
//         return response.status(400).json({      //CRUCIAL! without res, malformed note will save to app
//             error: 'content missing'
//         })
//     }

//     const person = {
//         content: body.content,
//         important: body.important || false,
//         date: new Date(),   //Generated by server since can't trust machine has date set up
//         id: generateId(),
//     }

//     persons = persons.concat(person)
//     console.log(person)
//     response.json(person)
// })

app.get('/', (request, response) => {
    response.send('<h1>Hello World!</h1>')
})

app.get('/api/info', (request, response) => {
    const utcDate1 = new Date(Date.now());
    response.send(`<p>Phonebook has info for ${persons.length} people </p> <p>${utcDate1.toUTCString()}</p>`)
})

app.get('/api/persons', (request, response) => {
    response.json(persons)
})

app.get('/api/persons/:id', (request, response) => {
    const id = Number(request.params.id)  //Change ID parameter to a number
    // console.log(id)  //test ID number
    const person = persons.find(person => person.id === id)
    // response.json(note)
    if (person) {
        response.json(person)
    } else {
        response.status(404).end()  //Return 404 error
    }
})

app.delete('/api/persons/:id', (request, response) => {
    const id = Number(request.params.id)
    persons = persons.filter(person => person.id !== id)

    response.status(204).end()  //No content status
})

// console.log(request.headers)  //Will show all headers which have been left empty

const PORT = 3001
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`)
})
